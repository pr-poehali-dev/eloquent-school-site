import { useState } from 'react';
import Icon from '@/components/ui/icon';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';

interface Project {
  id: string;
  name: string;
  description: string;
  status: 'active' | 'building' | 'deployed';
  createdAt: string;
  files: ProjectFile[];
  url?: string;
}

interface ProjectFile {
  id: string;
  path: string;
  content: string;
  type: 'component' | 'page' | 'style' | 'config';
}

function SystemTest() {
  const [projects, setProjects] = useState<Project[]>([
    {
      id: '1',
      name: '–õ–µ–Ω–¥–∏–Ω–≥ –¥–ª—è –∫–∞—Ñ–µ',
      description: '–ü—Ä–æ—Å—Ç–æ–π –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Å –º–µ–Ω—é',
      status: 'deployed',
      createdAt: new Date().toISOString(),
      url: 'https://cafe-landing.example.com',
      files: [
        { id: 'f1', path: 'src/App.tsx', content: 'import React...', type: 'page' },
        { id: 'f2', path: 'src/components/Menu.tsx', content: 'export const Menu...', type: 'component' },
      ]
    },
    {
      id: '2',
      name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç',
      description: '–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–∞–π—Ç —Å —Ñ–æ—Ä–º–∞–º–∏',
      status: 'active',
      createdAt: new Date().toISOString(),
      files: [
        { id: 'f3', path: 'src/App.tsx', content: 'import React...', type: 'page' },
      ]
    }
  ]);

  const [selectedProject, setSelectedProject] = useState<Project | null>(null);
  const [selectedFile, setSelectedFile] = useState<ProjectFile | null>(null);
  const [logs, setLogs] = useState<string[]>(['–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞']);
  const [showNewProjectDialog, setShowNewProjectDialog] = useState(false);
  const [showFileEditor, setShowFileEditor] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [newProjectDescription, setNewProjectDescription] = useState('');
  const [aiPrompt, setAiPrompt] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const addLog = (message: string) => {
    setLogs(prev => [`[${new Date().toLocaleTimeString()}] ${message}`, ...prev].slice(0, 100));
  };

  const createProject = () => {
    if (!newProjectName.trim()) return;

    const newProject: Project = {
      id: String(Date.now()),
      name: newProjectName,
      description: newProjectDescription,
      status: 'active',
      createdAt: new Date().toISOString(),
      files: [
        {
          id: `f${Date.now()}`,
          path: 'src/App.tsx',
          content: `function App() {\n  return <div>Hello from ${newProjectName}</div>;\n}\n\nexport default App;`,
          type: 'page'
        }
      ]
    };

    setProjects([newProject, ...projects]);
    addLog(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${newProjectName}`);
    setShowNewProjectDialog(false);
    setNewProjectName('');
    setNewProjectDescription('');
  };

  const deleteProject = (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    setProjects(projects.filter(p => p.id !== projectId));
    addLog(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${project?.name}`);
    if (selectedProject?.id === projectId) {
      setSelectedProject(null);
    }
  };

  const buildProject = (projectId: string) => {
    const project = projects.find(p => p.id === projectId);
    if (!project) return;

    setProjects(projects.map(p => 
      p.id === projectId ? { ...p, status: 'building' as const } : p
    ));
    addLog(`üî® –ù–∞—á–∞—Ç–∞ —Å–±–æ—Ä–∫–∞: ${project.name}`);

    setTimeout(() => {
      setProjects(projects.map(p => 
        p.id === projectId ? { 
          ...p, 
          status: 'deployed' as const,
          url: `https://${project.name.toLowerCase().replace(/\s+/g, '-')}.example.com`
        } : p
      ));
      addLog(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç: ${project.name}`);
    }, 3000);
  };

  const processAiRequest = async () => {
    if (!aiPrompt.trim() || !selectedProject) return;

    setIsProcessing(true);
    addLog(`ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: "${aiPrompt}"`);

    setTimeout(() => {
      const newFile: ProjectFile = {
        id: `f${Date.now()}`,
        path: `src/components/Generated${Date.now()}.tsx`,
        content: `// Generated by AI\n// Prompt: ${aiPrompt}\n\nfunction Component() {\n  return <div>AI Generated Component</div>;\n}\n\nexport default Component;`,
        type: 'component'
      };

      setProjects(projects.map(p => 
        p.id === selectedProject.id 
          ? { ...p, files: [...p.files, newFile] }
          : p
      ));

      addLog(`‚úÖ AI —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª: ${newFile.path}`);
      setAiPrompt('');
      setIsProcessing(false);
      
      setSelectedProject(prev => prev ? {
        ...prev,
        files: [...prev.files, newFile]
      } : null);
    }, 2000);
  };

  const updateFileContent = (content: string) => {
    if (!selectedFile || !selectedProject) return;

    setProjects(projects.map(p => 
      p.id === selectedProject.id 
        ? {
            ...p,
            files: p.files.map(f => 
              f.id === selectedFile.id ? { ...f, content } : f
            )
          }
        : p
    ));

    setSelectedFile({ ...selectedFile, content });
    addLog(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${selectedFile.path}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-950 via-purple-950 to-slate-950">
      <div className="container mx-auto px-4 py-6">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-white mb-2 flex items-center gap-3">
            <Icon name="Rocket" size={32} />
            –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
          </h1>
          <p className="text-purple-300">AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–∞–º–∏</p>
        </div>

        <div className="grid lg:grid-cols-12 gap-4">
          <div className="lg:col-span-3">
            <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-lg font-semibold text-white flex items-center gap-2">
                  <Icon name="FolderGit2" size={20} />
                  –ü—Ä–æ–µ–∫—Ç—ã ({projects.length})
                </h2>
                <Button
                  onClick={() => setShowNewProjectDialog(true)}
                  size="sm"
                  className="bg-purple-600 hover:bg-purple-700"
                >
                  <Icon name="Plus" size={16} />
                </Button>
              </div>

              <div className="space-y-2 max-h-[500px] overflow-y-auto">
                {projects.map(project => (
                  <div
                    key={project.id}
                    onClick={() => setSelectedProject(project)}
                    className={`p-3 rounded cursor-pointer transition-all ${
                      selectedProject?.id === project.id
                        ? 'bg-purple-600/30 border-purple-400 border'
                        : 'bg-white/5 hover:bg-white/10 border border-transparent'
                    }`}
                  >
                    <div className="flex items-start justify-between mb-1">
                      <h3 className="text-white font-medium text-sm truncate flex-1">
                        {project.name}
                      </h3>
                      {project.status === 'building' && (
                        <Icon name="Loader2" size={16} className="text-yellow-400 animate-spin" />
                      )}
                      {project.status === 'deployed' && (
                        <Icon name="CheckCircle" size={16} className="text-green-400" />
                      )}
                    </div>
                    <p className="text-purple-300 text-xs mb-2 line-clamp-2">
                      {project.description}
                    </p>
                    <div className="flex items-center gap-2 text-xs">
                      <span className="text-purple-400">{project.files.length} —Ñ–∞–π–ª–æ–≤</span>
                      {project.url && (
                        <a href={project.url} target="_blank" rel="noopener noreferrer" 
                           className="text-blue-400 hover:underline flex items-center gap-1"
                           onClick={(e) => e.stopPropagation()}>
                          <Icon name="ExternalLink" size={12} />
                        </a>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4 mt-4">
              <h3 className="text-sm font-semibold text-white mb-2 flex items-center gap-2">
                <Icon name="Activity" size={16} />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-purple-300">–ê–∫—Ç–∏–≤–Ω—ã—Ö</span>
                  <span className="text-white font-medium">
                    {projects.filter(p => p.status === 'active').length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-purple-300">–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö</span>
                  <span className="text-white font-medium">
                    {projects.filter(p => p.status === 'deployed').length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-purple-300">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</span>
                  <span className="text-white font-medium">
                    {projects.reduce((acc, p) => acc + p.files.length, 0)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <div className="lg:col-span-6">
            {selectedProject ? (
              <div className="space-y-4">
                <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h2 className="text-xl font-bold text-white mb-1">
                        {selectedProject.name}
                      </h2>
                      <p className="text-purple-300 text-sm">
                        {selectedProject.description}
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => buildProject(selectedProject.id)}
                        disabled={selectedProject.status === 'building'}
                        className="border-white/20"
                      >
                        <Icon name="Rocket" size={16} />
                        {selectedProject.status === 'building' ? '–°–±–æ—Ä–∫–∞...' : '–î–µ–ø–ª–æ–π'}
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => deleteProject(selectedProject.id)}
                        className="border-red-500/20 text-red-400 hover:bg-red-500/10"
                      >
                        <Icon name="Trash2" size={16} />
                      </Button>
                    </div>
                  </div>

                  {selectedProject.url && (
                    <a
                      href={selectedProject.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-2 text-blue-400 hover:underline text-sm"
                    >
                      {selectedProject.url}
                      <Icon name="ExternalLink" size={14} />
                    </a>
                  )}
                </div>

                <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4">
                  <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                    <Icon name="Bot" size={20} />
                    AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
                  </h3>
                  <div className="flex gap-2">
                    <Input
                      value={aiPrompt}
                      onChange={(e) => setAiPrompt(e.target.value)}
                      placeholder="–°–æ–∑–¥–∞–π —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏..."
                      className="flex-1 bg-black/30 border-white/20 text-white"
                      onKeyDown={(e) => e.key === 'Enter' && processAiRequest()}
                    />
                    <Button
                      onClick={processAiRequest}
                      disabled={isProcessing || !aiPrompt.trim()}
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      {isProcessing ? (
                        <Icon name="Loader2" size={20} className="animate-spin" />
                      ) : (
                        <Icon name="Send" size={20} />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4">
                  <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                    <Icon name="FileCode" size={20} />
                    –§–∞–π–ª—ã ({selectedProject.files.length})
                  </h3>
                  <div className="space-y-1 max-h-[400px] overflow-y-auto">
                    {selectedProject.files.map(file => (
                      <div
                        key={file.id}
                        onClick={() => {
                          setSelectedFile(file);
                          setShowFileEditor(true);
                        }}
                        className="p-2 rounded bg-black/20 hover:bg-black/40 cursor-pointer transition-all flex items-center gap-2"
                      >
                        <Icon 
                          name={file.type === 'component' ? 'FileCode' : file.type === 'page' ? 'Layout' : 'Palette'} 
                          size={16} 
                          className="text-purple-400" 
                        />
                        <span className="text-white text-sm font-mono">{file.path}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-12 text-center">
                <Icon name="FolderOpen" size={64} className="text-purple-400/50 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-2">
                  –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç
                </h3>
                <p className="text-purple-300">
                  –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                </p>
              </div>
            )}
          </div>

          <div className="lg:col-span-3">
            <div className="bg-white/5 backdrop-blur-lg rounded-lg border border-white/10 p-4">
              <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                <Icon name="Terminal" size={20} />
                –õ–æ–≥–∏
              </h3>
              <div className="bg-black/40 rounded p-3 h-[600px] overflow-y-auto font-mono text-xs space-y-1">
                {logs.map((log, i) => (
                  <div key={i} className="text-green-400">{log}</div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <Dialog open={showNewProjectDialog} onOpenChange={setShowNewProjectDialog}>
        <DialogContent className="bg-slate-900 border-white/20">
          <DialogHeader>
            <DialogTitle className="text-white">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</DialogTitle>
            <DialogDescription className="text-purple-300">
              –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 mt-4">
            <div>
              <label className="text-sm text-purple-300 mb-2 block">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</label>
              <Input
                value={newProjectName}
                onChange={(e) => setNewProjectName(e.target.value)}
                placeholder="–ú–æ–π –∫—Ä—É—Ç–æ–π –ø—Ä–æ–µ–∫—Ç"
                className="bg-black/30 border-white/20 text-white"
              />
            </div>
            <div>
              <label className="text-sm text-purple-300 mb-2 block">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <Textarea
                value={newProjectDescription}
                onChange={(e) => setNewProjectDescription(e.target.value)}
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
                className="bg-black/30 border-white/20 text-white"
                rows={3}
              />
            </div>
            <div className="flex gap-2">
              <Button
                onClick={createProject}
                className="flex-1 bg-purple-600 hover:bg-purple-700"
                disabled={!newProjectName.trim()}
              >
                <Icon name="Plus" size={20} />
                –°–æ–∑–¥–∞—Ç—å
              </Button>
              <Button
                onClick={() => setShowNewProjectDialog(false)}
                variant="outline"
                className="border-white/20"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      <Dialog open={showFileEditor} onOpenChange={setShowFileEditor}>
        <DialogContent className="bg-slate-900 border-white/20 max-w-3xl">
          <DialogHeader>
            <DialogTitle className="text-white font-mono">{selectedFile?.path}</DialogTitle>
            <DialogDescription className="text-purple-300">
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Ñ–∞–π–ª–∞
            </DialogDescription>
          </DialogHeader>
          <div className="mt-4">
            <Textarea
              value={selectedFile?.content || ''}
              onChange={(e) => updateFileContent(e.target.value)}
              className="bg-black/40 border-white/20 text-white font-mono text-sm"
              rows={20}
            />
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default SystemTest;
